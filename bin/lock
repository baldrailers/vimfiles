#!/usr/bin/env node

/*
 * Bower version locker
 * --------------------
 *
 * Creates `.bowerlock` and `bin/install` files to lock versions of your bower
 * setup. Place me in `./bin/lock`.
 *
 *     $ ./bin/lock
 *
 * `.bowerlock` will be based on your bower.json, only with versions locked:
 *
 *     {
 *       "dependencies": {
 *         "vim-haml": "tpope/vim-haml#0ff1cebad455..801",
 *         "vim-sensible": "tpope/vim-sensible#c0ffeedeadb33f..fe0",
 *         ...
 *       }
 *     }
 *
 * `bin/install` will be a shell script that you can run without bower:
 *
 *     if [ ! -e bundle/vim-haml ]; then git clone http://github.com/tpope/vim-haml.git bundle/vim-haml; fi
 *     if [ ! -e bundle/vim-sensible ]; then git clone http://github.com/tpope/vim-sensible.git bundle/vim-sensible; fi
 *     # ...
 */

var Config = {
  lockFile: '.bowerlock',
  installFile: 'bin/install'
};

/*
 * Run `bower list` and make lockfile and script from it
 */

capture('bower', ['list', '--relative', '--json'], function (err, data) {
  if (err) throw err;
  getDeps(data, function (err, data) {
    if (err) throw err;

    var lockfile = lockfilify(data);
    require('fs').writeFileSync(Config.lockFile, JSON.stringify(lockfile, null, 2));

    var script = scriptify(data);
    require('fs').writeFileSync(Config.installFile, script);
  });
});

/*
 * generate lockfile from getDeps() data. Returns a JS object.
 */

function lockfilify (data) {
  var json = JSON.parse(require('fs').readFileSync('bower.json', 'utf-8'));
  json.dependencies = {};
  delete json.devDependencies;

  Object.keys(data).forEach(function (key) {
    var dep = data[key];

    json.dependencies[key] = "" + dep.source + "#" + dep.target;
  });

  return json;
}

/*
 * generates scriptfile from getDeps() data. Returns a string.
 */

function scriptify (data) {
  var lines = [];

  lines.push('#!/usr/bin/env sh');
  lines.push('BUNDLE="'+getBowerPath()+'"');

  Object.keys(data).forEach(function (key) {
    var dep = data[key];

    var path = "\"$BUNDLE/"+key+"\"";
    var cmd =
      "if [ ! -e "+path+" ]; then " +
      "git clone "+dep.repo+" "+path+" && " +
      "(cd "+path+" && git checkout -q "+dep.target+" 2>/dev/null); " +
      "fi";

    lines.push("echo \"\\n=> "+dep.source+"\"");
    lines.push(cmd);
  });

  return lines.join("\n")+"\n";
}

/*
 * Get list of locked deps. Looks like this:
 *
 *     {
 *       "vim-unite-tag": {
 *         "source: "tsukkee/unitetag",
 *         "repo": "https://github.com/tsukkee/unite-tag.git",
 *         "target": "0.1.0",
 *         "type": "tag" (or "branch")
 *       },
 *       ...
 *     }
 */

function getDeps (data, fn) {
  data = JSON.parse(data);

  var dependencies = {};

  Object.keys(data.dependencies).forEach(function (key) {
    var dep = data.dependencies[key];

    var
      meta = dep.pkgMeta,
      name = meta.name,
      target = meta._target,
      source = meta._originalSource,
      res = meta._resolution && meta._resolution.type;

    // if the resolution is ambiguous, lock the commit instead
    if (!res) {
      source = dep.endpoint.source;
      target = 'master';
      res = 'branch';
    } else if (res === 'branch') {
      target = meta._resolution && meta._resolution.commit;
    } else if (res === 'version') {
      target = meta._resolution && meta._resolution.tag;
    }

    dependencies[name] = {
      source: source,
      target: target,
      repo: resolve(source),
      type: res
    };
  });

  fn(null, dependencies);
}

/*
 * Captures stdout. `err` will be available if exit code isn't 0
 *
 *     capture('ls', [], function (err, stdout) { ... });
 */

function capture(bin, args, fn) {
  var spawn = require('child_process').spawn;
  var child = spawn(bin, args);
  var data = "";

  child.stdout.on('data', function (_data) {
    data += _data;
  });

  child.on('close', function (code) {
    if (code !== 0) fn(new Error("exit code "+code));
    else fn(null, data);
  });
}

/*
 * "tpope/vim-haml" => "https://github.com/tpope/vim-haml.git"
 */

function resolve(src) {
  if ((~src.indexOf('://')) || (~src.indexOf('@')))
    return src;

  var m = src.split('/');
  return require('bower').config.shorthandResolver
    .replace('{{owner}}', m[0])
    .replace('{{package}}', m[1]);
}

/*
 * => "bower_components"
 */

function getBowerPath () {
  return require('bower').config.directory;
}
